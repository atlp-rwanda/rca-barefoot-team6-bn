version: '3.8'
services:
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  app:
    build: .
    depends_on:
      - postgres
    ports:
      - '8080:8080'
    volumes:
      # Maps our current project directory `.` to
      # our working directory in the container
      - ./:/usr/src/app/
      # node_modules workaround for volumes
      - /usr/src/app/node_modules

  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the 
  # address of this container.
  postgres:
    image: postgres:15.2-alpine
    restart: always
    environment:
      # You can set the value of environment variables
      # in your docker-compose.yml file
      # Our Node app will use these to connect
      # to the database
      - POSTGRES_USER=DB_USER
      - POSTGRES_PASSWORD=DB_PASSWORD
      - POSTGRES_DB=DB_NAME
    ports:
      # Standard port for PostgreSQL databases
      - '5432:5432'
    volumes:
      # Maps our current project directory `.` to
      # our working directory in the container
      - data:/data/db
volumes: 
  data: {}
# docker-compose up --build ): this flag tracks the new changes